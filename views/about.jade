-# © 2014 by Rheosoft. All rights reserved. 
-# Licensed under the RTDB Software License version 1.0
extends nav
block vars
  - var title = 'RTDB'
block append content
    h1(style="margin-left:10px") RTDB
      img(src="/RheoSoft_Logo.svg", width="110", alt="logo", style="margin-left:20px")
    p
      | Comments, questions? 
      a(href='mailto:info@rheosoft.com') info@rheosoft.com
    p
      | © 2014 by Rheosoft. All rights reserved. 
    h2 Overview
    p
      strong RTDB 
      | is a 
      strong r
      | eal-
      strong t
      | ime 
      a(href='http://www.json.org/') JSON 
      | document 
      strong d
      | ata
      strong b
      | ase.
      | Data is made available via 
      a(href='http://en.wikipedia.org/wiki/MapReduce') map/reduce 
      | queries.
      br
      | Queries are updated in real-time and subscribers are notified instantly as data is added.
    p
      | Use 
      strong RTDB 
      | and leave polling behind!
    h2 Installing
    ul
      li
        p
          | Clone the 
          a(href='http://git-scm.com/') git 
          | repository (use --recursive!)
        p
          | git clone --recursive
          a(href='https://bitbucket.org/chicagozer/rtdb')  git@bitbucket.org:chicagozer/rtdb.git
      li
        p
          | Then run
          em
            a(href='https://npmjs.org/')  npm 
            | install
        p
          code cd rtdb
          br
          code npm install
    h2 Usage
    p
      | Launch 
      strong RTDB 
      | with 
      a(href='http://http://nodejs.org/') node.js
      | . Change your settings file param as desired.
    p node RTDB.js --settings settings/settings.json
    h2 Acknowledgements
    p
      strong RTDB 
      | was inspired by and indebted to several projects.
    p
      | Especially 
      a(href='http://couchdb.apache.org/') couchdb
      |  and 
      a(href='http://nodejs.org/') node.js
      | .
    p
      | Thanks to 
      a(href='https://npmjs.org/') npm 
      | and several excellent libraries. See package.json for more details.
    p
      | Some samples contain a freely licensed template from 
      a(href='http://medialoot.com/item/html5-admin-template/') MediaLoot
      | .
    h2 Web interface
    p The main web interface is reachable 
      a(href='/web/') here.
    p
      | The web interface provides the ability to manage collections, views and subscriptions.
    h2 Architecture
    h3 Documents
    p
      strong RTDB 
      | is a 
      a(href='https://en.wikipedia.org/wiki/Document-oriented_database') document-oriented database
      | . A document may be any JSON object.
    h3 Collections
    p
      | Documents are organized into "Collections". A collection is a specific type of document. There is no requirement that all documents
      | be the same JSON format but it does help somewhat that all documents in a given collection have similar structures when designing queries.
    h3 Views
    p
      | Each collection contains "Views". A View represents a particular query into the Collection. All queries must be "pre-registered".
      | There is no "ad-hoc" query facility. However, as the data changes, registered queries are run continuously and subscribers are updated in real-time.
    h3 Subscriber
    p
      | A "Subscriber" represents a party (usually a browser) interested in receiving updates when the query results change. A query may have many subscribers.
      | Subscribers are registered via HTML EventSources.
    p The hierarchy is straightforward.
    p
      | Collections → Views → Subscribers
      br
      | ↳ Documents
    h3 Map/Reduce
    p
      | The query within each view is implemented via map/reduce. Each query requires a map function and a reduce function.
      br
      | Optionally, a finalize function and a personalize function can be added.
    h4 Map
    p
      | The map function is called once for each incoming document. It takes the following arguments.
    ul
      li
        | item -
        em item 
        | is the document to process.
      li
        | emit -
        em emit 
        | is a function that is called to 
        em map 
        | the item.
      li database - a reference to the database for accessing other collections/views.
    p
      em emit 
      | takes two arguments.
    pre
      code 
        | key - the hash to store
        | value - the value to store
    p
      em emit 
      | may be called one or more times for each call to map.
    h4 Reduce
    p
      | Reduce is called once for each key 
      em emitted 
      | by 
      em map
      | .  It takes the following arguments.
    ul
      li values - an array of values to reduce
      li
        | rereduce - a boolean indicating if we are 
        em rereducing
        | .
      li
        | emit - a function that is called to 
        em emit 
        | the result.
      li database - a reference to the database for accessing other collections/views.
    p
      em emit 
      | takes one argument, the result of the reduction. 
      em emit 
      | should be called no more than once per 
      em reduce
      | .
    p
      strong RTDB 
      | uses the 
      em re-reduce 
      | pattern to accomplish incremental map/reduce. The reduce function you supply must honor this flag.
    blockquote
      p
        | "[A] Reduce function has the requirement that not only must it be referentially transparent,
        | but it must also be commutative and associative for the array value input,
        | to be able reduce on its own output and get the same answer."
      p
        a(href='http://damienkatz.net/2008/02/incremental_map.html') Damien Katz
    p Therefore, again citing Damien, for a reduce function, 
    pre
      code
        | f(Key, Values) == f(Key, [ f(Key, Values) ] )
    p
      | More discussion 
      a(href='http://wiki.apache.org/couchdb/Introduction_to_CouchDB_views#Reduce_vs_rereduce') here
      | .
    h4 Finalize
    p
      | The
      em finalize 
      | function may be used to sort and/or cull the result set before sending to subscribers.
      | A common usage would be to sort and trim to a "top 10" list.
    p
      em finalize 
      | takes the following arguments.
    ul
      li
        | reduction - an array of reduced values to 
        em finalize
        | .
      li
        | emit - a function that is called to 
        em emit 
        | the result. Pass the 
        em finalized 
        | reduction.
      li database - a reference to the database for accessing other collections/views.
    h4 Personalize.
    p
      | The 
      em personalize 
      | function is similar to 
      em finalize 
      | however is it called separately for each subscriber.
      | The intent is to allow the function to use HTTP header values to identify the subscriber and personalize the resultset
      | specifically for the subscriber.
    p
      em personalize 
      | takes the following arguments.
    ul
      li
        | reduction - an array of reduced values to 
        em finalize
        | .
      li
        | headers - the HTTP headers of the current subscriber. See node.js 
        a(href='http://nodejs.org/api/http.html#http_message_headers') documentation
        | .
      li
        | emit - a function that is called to 
        em emit 
        | the result. Pass the 
        em personalized 
        | reduction.
      li database - a reference to the database for accessing other collections/views.
    h2 Security
    p
      strong RTDB 
      | does not have inherent security. This is by design.
    p
      strong RTDB 
      | is intended to be run behind a secure web server such as 
      a(href='http://httpd.apache.org/') Apache
      | .
      | Apache and other web servers provide facilities to apply granular URL based security to 
      strong RTDB
      | .
      | See advanced topic, securing 
      strong RTDB 
      | with simplesamlphp and Apache.
    h2 REST API
    p
      strong RTDB 
      | uses a REST API to manage the database. (The web interface even uses this REST API behind the scenes.
      | Feel free to check out the HTML!)
    p The REST API speaks JSON and uses standard verbs.
    p
      code GET
      | - return a JSON object.
    p
      code PUT
      | - update passing a JSON object.
    p
      code DELETE
      | - delete object according to url.
    p
      code POST
      | - insert JSON object or execute command according to URL.
    p
      | Each collection, view and subscriber is given a GUID. The GUID must be used to reference the object in the REST API.
    h3 Operations on Collections
    p
      code POST /db/collections
      | - Add a new Collection.
      br
      code PUT /db/collections/[col_guid]
      | - Update Collection.
      br
      code DELETE /db/collections/[col_guid]
      | - Delete Collection.
      br
      code GET /db/collections
      | - List all collections.
      br
      code GET /db/collections/[col_guid]
      | - List specific collection.
      br
      code POST /db/collections[col_guid]/documents
      | - Add a Document or Array of Documents.
      br
      code DELETE /db/collections/[col_guid]/documents
      | - Delete all Documents.
    h3 Operations on Views
    p
      code POST /db/collections[col_guid]/views
      | - Add a new View.
      br
      code PUT /db/collections/[col_guid]/views/[view_guid]
      | - Update View.
      br
      code DELETE /db/collections/[col_guid]/views/[view_guid]
      | - Delete View.
      br
      code GET /db/collections/[col_guid]/views
      | - List all Views.
      br
      code GET /db/collections/[col_guid]/views/[view_guid]
      | - List View.
      br
      code GET /db/collections/[col_guid]/views/[view_guid]/subscribers
      | - List subscribers.
      br
      code GET /db/collections/[col_guid]/views/[view_guid]/reduction
      | - List query result.
    h3 Miscellaneous Operations
    p
      code GET /db/stream?view=[guid]
      | - Used by EventSource. Multiple view params are supported.
      br
      code GET /db/admin/stats
      | - Show database stats in JSON.
      br
      code POST /db/admin/stop
      | - Shutdown the database.
    h2 Using RTDB
    p
      | Steps for using 
      strong RTDB 
      | are:
    ol
      li Define a collection.
      li Define one or more views for the collection.
      li Subscribers will register for queries via EventSource API.
      li Insert new JSON documents via the REST API. 
      li Subscribers receive updates as documents are inserted.
    p
      | Use the REST API to insert documents. An example CURL syntax to load a file
      em mydoc.json 
      | would be
    pre
      code
        | curl -X POST -H 'Content-Type: application/json' -d @mydoc.json http://localhost:9001/db/collections/[col_guid]/documents
      
    p
      | Note that for inserts, the 
      strong RTDB 
      | REST API expects either a single JSON document or array of documents.
      | To maximize performance, the map/reduce is run once for the entire array.
      | So use arrays when inserting multiple documents at once.
    p
      | Browser subscribers register for streams via the 
      a(href='http://www.w3.org/TR/eventsource/') HTML5 event source API
      | .
    p
      | Instead of creating multiple EventSources, supply multiple view params for each additional stream.
      | Most browsers have a limit on the number of EventSources that may be created per page.
      | With this technique there is no limit to the number of subscriptions.
    p When adding the EventListener, use the GUID of the view.
    pre
      code
        | var source = new EventSource(
        |   "/db/stream?view=6f57030d-ccad-41df-aa92-689292fa2c42&amp;view=ec537999-60a5-41f3-9036-fcd3d5356ae2");
        | source.addEventListener("6f57030d-ccad-41df-aa92-689292fa2c42", function(event) {
        |   console.log(event.data);
        |   }, false);
        | source.addEventListener("ec537999-60a5-41f3-9036-fcd3d5356ae2", function(event) {
        |   console.log(event.data);
        |   }, false);
      
    h2 Demo and Sample Database
    p
      strong RTDB 
      | comes with a small sample database and web front-end accessible  
      a(href='/demo/apples') here.
    p
      | In this demo, the HTML5 web page registers an EventSource and documents are added through the REST API.
    h2 Advanced Topics
    h3 RTDB files and directories
    p
      | Here is a summary of the 
      strong RTDB 
      | project file structure.
    pre
      code
        | /package.json - main package  
        | /README.md - this file   
        | /rtdb.js - the main class  
        | /collection.js - collection class  
        | /identity.js - helper class for guid identity  
        | /view.js - view class  
        | /db.js - databse class  
        | /cfs - the pluggable file systems.  
        |    /cfslocal.js - local file storage  
        |    /cfss3.js - Amazon S3 storage  
        | /node_modules - required Node modules.  
        | /public - static files served by the web server.  
        | /settings - startup options in JSON format.  
        |    /settings.json - basic settings  
        |    /mocha.json - settings for running mocha tests  
        | /test - mocha tests.  
        | /views - Jade templates used by the Web interface
      
    p There are two default settings files in /settings.
    p
      | settings.json - a basic startup settings file. It will run the demo database provided
      | in the sampledb subdirectory.
      br
      | mocha.json - used for 
      a(href='http://visionmedia.github.io/mocha/') mocha 
      | testing. Note, to run all the mocha tests, provide valid S3 connection params in this file.
    h3 Database file structure
    p
      | The database is a hierarchy of JSON files. Each JSON file is uniquely named [guid].json.
      | Where [guid] is the GUID assigned to the object.
    p
      code /collections
      |  - contains one file for each collection in format [col
      em
        | guid].json
        br
        code /collection/[col_guid]/documents
        |  - contains one json file per document.
        br
        code /collection/[col_guid]/views
        |  - contains one file for each view in format [view
      | guid].json
      br
      code /collection/[col_guid]/view/[view_guid]/reduction
      |  - for "transient" collections, each reduction is saved at shutdown.
    h3 Securing RTDB
    p
      strong RTDB 
      | is designed to work with standard web-based security mechanisms.
    p
      | User and group authentication should be considered for any production deployment.
    p
      | The REST API may be secured by specific URL to limit or control access at the collection or view level.
    p In production environments, admin functions should be secured by method and URL.
    h3 Using Expiration
    p
      | A collection may be given an document
      em expiration 
      | in milliseconds.
      | This can be useful for implementing queries based on sliding windows. (i.e. trends for the last hour, last day, etc).
      br
      | If you only want the last hour's worth of data, set the expiration to 3600000 (1000*60*60).
      | The views associated with the collection will be automatically map/reduced when the expiration is triggered.
    p
      | Note, the
      em expiration
      | value is used to signal when to map/reduce.
      | It is expected that the persistence provider perform the actual removal of the stale documents.
      | In the case of the local filesystem CFS, an external task, such as a cron entry, should be used to delete stale files.
    p To illustrate the sequence, here is an example.
    p
      | 10:05am - insert 5 documents; assume expiration is 3660 secs. (1 hour + 1 minute)
      br
      | 11:05am - cron runs, deleting all files older than 60 mins.
      br
      | 11:06am - expiration timer will fire; collection will be map/reduced. Documents added at 10:05 will have fallen off.
    p
      | Using 
      em expiration 
      | can be expensive. As each batch of documents expires, the full collection must be map-reduced. 
      em Expiration 
      | will ensure the collection is map-reduced the minimum number of times required..
      | However, if you are inserting large volumes of documents, consider simply forcing a map-reduce via the REST API on a regular interval instead.
    p
      | If you are very concerned about the expense of performing a full map-reduce,
      | consider simply clearing the collection on a timed interval.
      | The effect is a bit different than a sliding window, but very efficient.
    h3 Using Transient
    p
      | When a collection is marked as 
      em transient
      | , collections are reduced, but documents are not persisted.
      | This can be useful for high volume or when the data is persisted elsewhere.
    p
      | One caveat is that when new views are added to a collection,
      | the reduction can only happen on "new" documents.
    p
      | Reductions are persisted when the database is shutdown so that current state of reductions are preserved when the database is restarted.
    p
      | Note that collections that use 
      em expiration 
      | cannot use 
      em transient
      | .
      | These two flags are mutually exclusive.
    h3 Using Priority
    p
      | When a collection will be used for lookups (aka master table), it must be loaded before its dependent collections.
      br
      | Use the 
      em Priority 
      | to order how collections are loaded. Lower numbers are loaded first.
    h3 Using Deltas
    p
      | If you pass the query parm 
      em delta 
      | when subscribing to a stream. i.e.
    pre
      code
        | /db/stream?view=6f57030d-ccad-41df-aa92-689292fa2c42&amp;delta=true
      
    p
      | In 
      em delta 
      | mode 
      strong RTDB 
      | will first send a full JSON reduction, then all subsequent updates will be 
      em diffs
      | .
      | The 
      a(href='https://github.com/Two-Screen/symmetry') symmetry 
      | Javascript library may be used to patch the reduction with the latest diff.
    pre
      code
        | var reduction = Symmetry.patch(lastreduction,JSON.parse(event.data));
      
    p
      | A 
      em delta 
      | version of the demo may be found 
      a(href='/demo/apples_delta') here
      | .
    p
      | Use 
      em delta 
      | mode when the overall size of the reduction is large compared to the amount of incremental change.
      | However, depending on the view, using delta mode may be less efficient than sending the full reduction.
    h3 Referencing other Collections in a Query
    p
      | Unlike a relational database, there is no 
      em join 
      | syntax to combine collections.
      | However the database object is passed to the map/reduce methods and
      | this can be useful for referencing other collections when a lookup is required.
    pre
      code
        |// myobject will contain the hash used for the lookup
        |var myobject;
        |// Use a GUID to get a reference to the other collection
        |var c=database.collectionAt('be2aec31-3d1d-4674-bc20-106d5c46e220'); 
        |// Use a GUID to get the intended view
        |var v = c.viewAt('e3ef472a-1f7e-469e-98f9-cf759cc05352'); 
        |// do the lookup by using "myobject" as the hash
        |var r = v.reductionAt(myobject);
        |// use the return value "r" as needed.
      
    h3 Custom Persistence
    p
      strong RTDB 
      | uses plugins for persistence. A local filesystem (cfslocal) implementation and Amazon S3 (cfss3) are provided.
      br
      | To add your own provider, implement these methods for your provider and install
      | the javascript module into the /cfs subdirectory.
      | You may use either 
      em cfslocal.js 
      | or 
      em cfss3.js 
      | as a template.
    pre
      code
        |function name()  - return a unique name for this provider
        |function init(parms)  - initialize with params from settings.json
        |function exists(dir, callback)  - does this exist? 
        |function get(key, callback)  - return object by key
        |function del(key, callback)   - delete object by key
        |function put(prefix, item, callback, expires)   - put object
        |function list(prefix, callback)  - list objects
      
 